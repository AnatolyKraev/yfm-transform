#!/usr/bin/env node

'use strict';
const now = require('performance-now');
const camelize = require('camelize');

const filesProcessing = require('../lib/filesProcess');
const log = require('../lib/log');
const getConfigParams = require('../lib/getConfigParams');

const cwd = process.env.INIT_CWD || process.cwd();
const dataExample = JSON.stringify({'user': {'name': 'Alice'}});
const argsFromConfig = getConfigParams(require('yargs').argv.config);

const argv = require('yargs')
    .config(argsFromConfig)
    .options({
        'source': {
            'default': cwd,
            'describe': 'Путь до папки с markdown файлами',
        },
        'dest': {
            'default': cwd,
            'describe': 'Путь до папки где будет размещен результат трансформации',
        },
        'styles': {
            'default': false,
            'describe': 'Нужно ли стилизовать выходной HTML',
            'type': 'boolean',
        },
        'vars': {
            'default': '{}',
            'describe': 'Данные для подстановки и вычисления условных операторов',
        },
        'vars-preset': {
            'default': 'default',
            'describe': 'Название пресета переменных из файла presets.yaml',
        },
        'outputFormat': {
            'default': 'html',
            'describe': 'DEPRECATED',
        },
        'output-format': {
            'default': 'html',
            'describe': 'Формат трансформации: html или md',
        },
        'one-file': {
            'default': false,
            'describe': 'Объединить файлы в один',
            'type': 'boolean',
        },
        'document': {
            'default': null,
            'describe': 'Конфигурация сборки',
        },
        'allow-html': {
            'default': false,
            'describe': 'Разрешено ли использование HTML',
            'type': 'boolean',
        },
        'process-toc': {
            'default': false,
            'type': 'boolean',
            'describe': 'Включать toc.yaml в результат трансформации',
        },
        'fail-on-errors': {
            'default': false,
            'type': 'boolean',
            'describe': 'При наличии ошибок в логах завершаться с ненулевым кодом возврата',
        },
        'config': {
            'default': null,
            'type': 'string',
            'describe': `Использовать переменные из конфигурационного файла при запуске yfm-transform.
                         Переменные в cli имеют больший приоритет, чем переменные файла config`,
        },
    })
    .example(
        `yfm-transform --source ./md-sources-dir --dest ./html-output --styles --vars ${dataExample}`,
        'Трансформация в стилизованный HTML',
    )
    .example(
        `yfm-transform --source ./md-sources-dir --dest ./md-output output-format md  --vars ${dataExample}`,
        'Трансформация в Markdown с примененными условными операторами',
    )
    .argv;

const start = now();

filesProcessing({
    ...camelize(argv),
    vars: typeof argv.vars === 'string' ? JSON.parse(argv.vars) : argv.vars,
});

log(`Build time: ${Math.round(now() - start) / 1000} s`);
