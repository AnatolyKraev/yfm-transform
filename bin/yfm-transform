#!/usr/bin/env node

'use strict';
const path = require('path');
const fs = require('fs');
const argv = require('yargs').argv;
const glob = require('glob');
const mkdirp = require('mkdirp');
const transformToHTML = require('../lib');
const transformToMD = require('../lib/transformToMD');

const cwd = process.env.INIT_CWD || process.cwd();
let source = argv.source || cwd;
let dest = argv.dest || cwd;
const styles = argv.styles || false;
const vars = JSON.parse(argv.vars || '{}');
const outputFormat = argv.outputFormat || 'html';

source = path.resolve(cwd, source);
dest = path.resolve(cwd, dest);

let files;
const sourceStats = fs.statSync(source);
if (sourceStats.isDirectory()) {
    files = glob.sync('**/*.md', {cwd: source});
} else {
    const {dir, base} = path.parse(source);
    source = dir;

    files = glob.sync(base, {cwd: source});
}

const hljsStyles = fs.readFileSync(path.join(__dirname, '../node_modules/highlight.js/styles/default.css'));
const yfmStyles = fs.readFileSync(path.join(__dirname, '../dist/css/yfm.min.css'));
const yfmJS = fs.readFileSync(path.join(__dirname, '../dist/js/yfm.min.js'));
function styledHtml(html, meta) {
    return `
<!doctype html>
<html>
<head>
    <meta charset="UTF-8"/>
    <title>${meta.title || ''}</title>
    <style>
        ${yfmStyles}
    </style>
    <style>
        ${hljsStyles}
    </style>
    <style>
        .markdown-body {
            margin: 0 auto;
            min-width: 200px;
            max-width: 980px;
            padding: 45px;
        }
    </style>
</head>
<body class="markdown-body yfm">
    ${html}
    <script>
        ${yfmJS}
    </script>
</body>
</html>
    `.trim();
}

files.forEach((sourceFile) => {
    const destFile = path.format({
        ...path.parse(sourceFile),
        base: undefined,
        ext: `.${outputFormat}`
    });
    const sourcePath = path.resolve(source, sourceFile);
    const destPath = path.resolve(dest, destFile);
    const sourceFileContent = fs.readFileSync(sourcePath, 'utf8');

    let destFileContent;
    switch (outputFormat) {
        case 'html': {
            const {html, meta} = transformToHTML(sourceFileContent, {
                path: sourcePath,
                root: source,
                assetsPublicPath: '/',
                vars
            });

            destFileContent = styles ? styledHtml(html, meta) : html;

            break;
        }
        case 'md': {
            destFileContent = transformToMD(sourceFileContent, {vars, path: sourcePath});

            break;
        }
    }

    const {dir: fileDestDir} = path.parse(destPath);
    mkdirp.sync(fileDestDir);
    fs.writeFileSync(destPath, destFileContent, 'utf8');
});
