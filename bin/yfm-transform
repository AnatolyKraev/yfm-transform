#!/usr/bin/env node

'use strict';
const filesProcessing = require('../lib/filesProcess');

const cwd = process.env.INIT_CWD || process.cwd();
const dataExample = JSON.stringify({'user': {'name': 'Alice'}});
const argv = require('yargs')
    .options({
        'source': {
            'default': cwd,
            'describe': 'Путь до папки с markdown файлами'
        },
        'dest': {
            'default': cwd,
            'describe': 'Путь до папки где будет размещен результат трансформации'
        },
        'styles': {
            'default': false,
            'describe': 'Нужно ли стилизовать выходной HTML'
        },
        'vars': {
            'default': '{}',
            'describe': 'Данные для подстановки и вычисления условных операторов'
        },
        'vars-preset': {
            'default': 'default',
            'describe': 'Название пресета переменных из файла presets.yaml'
        },
        'outputFormat': {
            'default': 'html',
            'describe': 'DEPRECATED'
        },
        'output-format': {
            'default': 'html',
            'describe': 'Формат трансформации: html или md'
        },
        'one-file': {
            'default': false,
            'describe': 'Объединить файлы в один'
        }
    })
    .example(
        `yfm-transform --source ./md-sources-dir --dest ./html-output --styles --vars ${dataExample}`,
        'Трансформация в стилизованный HTML'
    )
    .example(
        `yfm-transform --source ./md-sources-dir --dest ./md-output outputFormat md  --vars ${dataExample}`,
        'Трансформация в Markdown с примененными условными операторами'
    )
    .argv;

filesProcessing({
    ...argv,
    vars: JSON.parse(argv.vars),
    varsPreset: argv['vars-preset'],
    outputFormat: argv['output-format'] !== 'html' ? argv['output-format'] : argv.outputFormat,
    oneFile: argv['one-file']
});
